// Define pins for buttons, motor, LEDs, and buzzer
const int button1Pin = 2;   // Button 1
const int button2Pin = 3;   // Button 2
const int motorForwardPin = 4;  // Motor forward (unlock)
const int motorReversePin = 5;  // Motor reverse (lock)
const int buzzerPin = 6;   // Buzzer
const int redLEDPin = 11;   // Red LED (locked or error)
const int greenLEDPin = 12; // Green LED (unlocked)

// Variables for password tracking
int button1PressCount = 0;
int button2PressCount = 0;
int wrongAttempts = 0;
bool isUnlocked = false;
unsigned long lastPressTime = 0;   // Time of the last button press
unsigned long pressStartTime = 0;  // For simultaneous button pressing
const unsigned long timeout = 5000; // 5-second timeout for password entry

void setup() {
  // Initialize pins
  pinMode(button1Pin, INPUT_PULLUP);
  pinMode(button2Pin, INPUT_PULLUP);
  pinMode(motorForwardPin, OUTPUT);
  pinMode(motorReversePin, OUTPUT);
  pinMode(redLEDPin, OUTPUT);
  pinMode(greenLEDPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  // Start in locked state
  digitalWrite(motorForwardPin, LOW );
  digitalWrite(motorReversePin, LOW);
  digitalWrite(redLEDPin, HIGH);
  digitalWrite(greenLEDPin, LOW);

  Serial.begin(9600);  // For debugging
}

void loop() {
  int button1State = digitalRead(button1Pin);
  int button2State = digitalRead(button2Pin);
  unsigned long currentTime = millis();

  // Reset password input if no button is pressed within 5 seconds
  if (currentTime - lastPressTime > timeout && (button1PressCount > 0 || button2PressCount > 0)) {
    Serial.println("Timeout, please re-enter password.");
    resetPassword();
    beepBuzzer(2);  // Beep twice to indicate password reset
  }

  // Handle password input
  if (!isUnlocked) {
    // Button 1 press (should only happen once)
    if (button1State == LOW) {
      delay(200);  // Debounce delay
      if (digitalRead(button1Pin) == LOW) {
        button1PressCount++;
        lastPressTime = currentTime;
        Serial.println("Button 1 pressed.");
        delay(200); // Ensure single press recognition
      }
    }

    // Button 2 presses (should happen 6 times)
    if (button2State == LOW) {
      delay(200);  // Debounce delay
      if (digitalRead(button2Pin) == LOW) {
        button2PressCount++;
        lastPressTime = currentTime;
        Serial.println("Button 2 pressed.");
        delay(200); // Ensure single press recognition
      }
    }

    // Check if the correct password pattern is entered
    if (button1PressCount == 1 && button2PressCount == 6) {
      unlock();  // Unlock if the correct pattern is entered
    }
  }

  // Handle locking process (press both buttons for 3 seconds to lock)
  if (button1State == LOW && button2State == LOW) {
    if (pressStartTime == 0) {
      pressStartTime = millis();  // Start timing
    } else if (millis() - pressStartTime >= 3000) {
      lock();  // Lock after 3 seconds of holding both buttons
    }
  } else {
    pressStartTime = 0;  // Reset the timer if buttons are released
  }

  // Handle wrong password attempts (reset if wrong pattern entered)
  if (button1PressCount > 1 || button2PressCount > 6) {
    wrongAttempts++;
    Serial.println("Incorrect password attempt.");
    resetPassword();
    beepBuzzer(1);  // Beep once for wrong attempt
  }

  // Trigger the buzzer if 3 wrong attempts are made
  if (wrongAttempts >= 3) {
    wrongAttempts = 0;  // Reset wrong attempts after buzzing
    Serial.println("3 incorrect attempts, buzzing...");
    beepBuzzer(3);      // Buzz and turn on red light for 2 seconds
    digitalWrite(redLEDPin, HIGH);
    delay(2000);
    digitalWrite(redLEDPin, LOW);
  }
}

// Function to unlock the motor (move forward)
void unlock() {
  Serial.println("Password correct. Unlocking...");
  isUnlocked = true;
  digitalWrite(motorForwardPin, HIGH);  // Turn on motor forward for unlocking
  digitalWrite(motorReversePin, LOW);   // Ensure reverse pin is LOW
  digitalWrite(greenLEDPin, HIGH);      // Green LED on
  digitalWrite(redLEDPin, LOW);         // Red LED off
  delay(1000);                          // Run motor for 2 seconds (unlocking)
  digitalWrite(motorForwardPin, LOW);   // Stop motor after unlocking
}

// Function to lock the motor (move reverse)
void lock() {
  Serial.println("Locking...");
  isUnlocked = false;
  digitalWrite(motorReversePin, HIGH);  // Turn on motor reverse for locking
  digitalWrite(motorForwardPin, LOW);   // Ensure forward pin is LOW
  digitalWrite(greenLEDPin, LOW);       // Green LED off
  digitalWrite(redLEDPin, HIGH);        // Red LED on
  delay(1000);                          // Run motor for 2 seconds (locking)
  digitalWrite(motorReversePin, LOW);   // Stop motor after locking
}

// Function to reset password attempts
void resetPassword() {
  button1PressCount = 0;
  button2PressCount = 0;
  lastPressTime = 0;
}

// Function to beep the buzzer a given number of times
void beepBuzzer(int times) {
  for (int i = 0; i < times; i++) {
    digitalWrite(buzzerPin, HIGH);
    delay(200);
    digitalWrite(buzzerPin, LOW);
    delay(200);
  }
}