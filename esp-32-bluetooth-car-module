#include <BluetoothSerial.h>

// Create a BluetoothSerial object
BluetoothSerial SerialBT;

// Define motor control pins
const int motor1Pin1 = 26; // Motor 1 forward
const int motor1Pin2 = 33; // Motor 1 backward
const int motor2Pin1 = 32; // Motor 2 forward
const int motor2Pin2 = 25; // Motor 2 backward

// Timer variables
unsigned long lastCommandTime = 0;   // Tracks the last time a command was received
const unsigned long timeoutDuration = 100; // Timeout duration in milliseconds (e.g., 2 seconds)

// Function to stop the car
void stopCar() {
  Serial.println("Action: Stop");
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
}

// Function to move forward
void moveForward() {
  Serial.println("Action: Move Forward");
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

// Function to move backward
void moveBackward() {
  Serial.println("Action: Move Backward");
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

// Function to turn left
void turnLeft() {
  Serial.println("Action: Turn Left");
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
}

// Function to turn right
void turnRight() {
  Serial.println("Action: Turn Right");
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, HIGH);
}

// Function to move top-left diagonal
void topLeftDiagonal() {
  Serial.println("Action: Move Top-Left Diagonal");
  

  digitalWrite(motor1Pin1, HIGH); // Left motor moves forward
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW); // Right motor stops
  digitalWrite(motor2Pin2, LOW);
}

// Function to move top-right diagonal
void topRightDiagonal() {
  Serial.println("Action: Move Top-Right Diagonal");
  digitalWrite(motor1Pin1, LOW); // Left motor stops
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, HIGH); // Right motor moves forward
  digitalWrite(motor2Pin2, LOW);
}

// Function to move bottom-left diagonal
void bottomLeftDiagonal() {
  Serial.println("Action: Move Bottom-Left Diagonal");
  

  digitalWrite(motor1Pin1, LOW); // Left motor moves backward
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, LOW); // Right motor stops
  digitalWrite(motor2Pin2, LOW);
}

// Function to move bottom-right diagonal
void bottomRightDiagonal() {
  Serial.println("Action: Move Bottom-Right Diagonal");
  digitalWrite(motor1Pin1, LOW); // Left motor stops
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW); // Right motor moves backward
  digitalWrite(motor2Pin2, HIGH);
}

void setup() {
  // Initialize motor control pins
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);

  // Initialize Serial Monitor
  Serial.begin(115200);
  Serial.println("Serial Monitor started!");

  // Set a custom name for the ESP32 Bluetooth
  const char* customName = "ESP32_Bluetooth_final2";
  SerialBT.begin(customName); // Set Bluetooth name
  Serial.print("Bluetooth Car is ready as: ");
  Serial.println(customName);

  // Provide usage instructions
  Serial.println("Send 'F' for Forward, 'B' for Backward, 'L' for Left, 'R' for Right, 'S' for Stop.");
  Serial.println("Send 'G' for Top-Left, 'I' for Top-Right, 'H' for Bottom-Left, 'J' for Bottom-Right.");
}

void loop() {
  // Check for incoming commands
  if (SerialBT.available()) {
    char command = SerialBT.read(); // Read the incoming command
    Serial.print("Received command: ");
    Serial.println(command);

    // Handle commands
    switch (command) {
      case 'F': // Forward
        moveForward();
        break;
      case 'B': // Backward
        moveBackward();
        break;
      case 'L': // Left
        turnLeft();
        break;
      case 'R': // Right
        turnRight();
        break;
      case 'S': // Stop
        stopCar();
        break;
      case 'G': // Top-Left Diagonal
        topLeftDiagonal();
        break;
      case 'I': // Top-Right Diagonal
        topRightDiagonal();
        break;
      case 'H': // Bottom-Left Diagonal
        bottomLeftDiagonal();
        break;
      case 'J': // Bottom-Right Diagonal
        bottomRightDiagonal();
        break;
      default:
        Serial.println("Unknown command. Stopping the car.");
        stopCar();
        break;
    }

    // Update the last command time
    lastCommandTime = millis();
  }

  // Check for timeout
  if (millis() - lastCommandTime > timeoutDuration) {
    stopCar();
  }
}
